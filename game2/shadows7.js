//input 
// uSampler - current shadows bitmap
// iChannel0 - shadows generated by three.js + light coords
//output - fancy shadows
Phaser.Filter.Shadow7 = function(game) {
    Phaser.Filter.call(this, game);

    this.uniforms.wSize = {value: {x: 0, y: 0}, type: '2f'};

    this.uniforms.light = {value: {x: 0, y: 0, z:0}, type: '3f'};
    this.uniforms.lightSize = {value: {x: 0, y: 0}, type: '2f'};
    this.uniforms.lightStrength = {value: 1.0, type: '1f'};

    var header = [
        "precision mediump float;",
        "uniform sampler2D uSampler;",
        "uniform sampler2D iChannel0;",
        'varying vec2 vTextureCoord;',

        "uniform vec2 wSize;",

        "uniform vec3 light;",
        "uniform vec2 lightSize;",
        "uniform float lightStrength;"
    ];


    
    var main = [
        

        "void main(void) {",

            "vec3 coords = vec3(gl_FragCoord.x, wSize.y-gl_FragCoord.y, 0);",
            "gl_FragColor = texture2D(uSampler, vTextureCoord);",
            "float lt = (lightSize.x < 0. ? 1.0 : smoothstep(1.0, 0.0, (distance(coords, light))/lightSize.x));",
        
            //out
            "vec4 rcolor = vec4(1. - texture2D(iChannel0, coords.xy / vec2(640,640)).r);",
            "gl_FragColor.a = clamp(gl_FragColor.a - lightStrength * lt * (1. - rcolor.a), 0., 1.);",

        "}"
    ];

    this.fragmentSrc = header.concat(main);
    

};

Phaser.Filter.Shadow7.prototype = Object.create(Phaser.Filter.prototype);
Phaser.Filter.Shadow7.prototype.constructor = Phaser.Filter.Shadow7;

Phaser.Filter.AmbientColor7 = function(game) {
    Phaser.Filter.call(this, game);

    this.uniforms.ambientColor = {value: {x:0,y:0,z:0,w:0.8}, type: '4f'};

    this.fragmentSrc = [
        "precision mediump float;",
        "uniform vec4 ambientColor;",
        "void main() { gl_FragColor = ambientColor;}"
    ]
};

Phaser.Filter.AmbientColor7.prototype = Object.create(Phaser.Filter.prototype);
Phaser.Filter.AmbientColor7.prototype.constructor = Phaser.Filter.AmbientColor7;
