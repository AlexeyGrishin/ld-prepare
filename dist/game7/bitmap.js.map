{"version":3,"sources":["../../game7/bitmap.js"],"names":["preload","game","time","advancedTiming","load","image","MIN_SIZE","REGION_SIZE","options","initOptions","doRecolor","useRegions","regionsPerTick","recolorMode","recolorRadius","spawnDelay","showGrid","splitRegion","MultiBitmap","width","height","sw","sh","sprite","bitmaps","r","row","push","c","bitmap","add","bitmapData","sx","sy","dirtyBitmaps","regions","x","y","w","h","console","log","length","_bitmap","g","b","forEach","bm","fill","undefined","_ourDirty","Error","shift","context","putImageData","imageData","dirty","obj","a","_outside","getPixel","immediate","setPixel","setDirty","cb","update","EMPTY","value","Grid","grid","W","PIX","col","H","_state","_total","gx","gy","val","oldT","t","y1","y2","get","PIX_SHIFT","set","particles","growingBitmap","tempCanvas","PIX_MID","PIX_B1","PIX_B2","buttons","timer","inited","SX","SY","infection","create","stage","backgroundColor","updateAll","i","Z","input","keyboard","addKey","Phaser","Keyboard","X","C","prepareParticles","loop","toAdd","total","around","Math","random","Infection","infTextureSprite","uniforms","iChannel0","texture","textureSize","resolution","world","filters","pix","recolor","createRecolorer","toRecolor","regionsToRecolor","MAX_RECOLOR","slice","getCell","growing","mb","activePointer","justDown","JSON","stringify","_inited","_updated","updatedCount","cell","updated","updateCell","_scheduledForRecolor","resultBitmap","ctx","drawImage","canvas","globalCompositeOperation","innerHTML","getDataTime","putDataTime","recolorTime1","recolorTime2","recolorTime3","onlyBitmap","count","checkedPixelsTotal","s1","Date","getTime","region","s2","t1","t2","checked","s3","s4","times","b1","b2","b3","map","s","toFixed","join","document","querySelector","aroundBase","getter","res","list","ax","ay","aroundGrown","canvas1","createElement","body","appendChild","getContext","fillStyle","rnd","integerInRange","beginPath","arc","PI","j","rect","cache","drawParticle","particle","mode","pick","scale","oldW","oldH","oldMiddle","newW","newH","newMiddle","diff","clearRect","ar","SPEED","PIX_PER_STEP","strokeStyle","lineWidth","strokeRect","delay","dx","dy","stepsLeft","skipLeft","size","ps","abs","reducing","somethingChanged","part","sign","neiColors","neiColors1","RADIUS","nei","color","hypot","aroundCache","recolorAll","pad","RSTEP","SSTEP","data","len","updates","red","blue","green","alpha","maxR","minR","updatesCount","ni","nc","nred","ii","maxSkip","skip","redAround","del","emptyAround","min","outR","max","sgn","floor","ui","up","fpsEl","debugRender1","innerText","fps","started","addEventListener","resume","start","pause"],"mappings":"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","file":"bitmap.js","sourcesContent":["function preload() {\n    game.time.advancedTiming = true;\n    game.load.image('texture', 'texture.png');\n}\nconst MIN_SIZE = 1024;\n\nconst REGION_SIZE = 512;\n\nlet options = initOptions({\n    doRecolor: [\"boolean\", true],\n    useRegions: [\"boolean\", true],\n    regionsPerTick: [\"int\", 8],\n    recolorMode: [\"int\", 1],\n    recolorRadius: [\"int\", 2],\n    spawnDelay: [\"int\", 1000],\n    showGrid: [\"boolean\", false],\n    splitRegion: [\"int\", 3]\n});\n\n\nclass MultiBitmap {\n    constructor(width, height, sw = MIN_SIZE, sh = MIN_SIZE, sprite = true) {\n        this.width = width;\n        this.height = height;\n        this.sw = sw;\n        this.sh = sh;\n        this.bitmaps = [];\n        for (let r = 0; r < height/sh; r++) {\n            let row = [];\n            this.bitmaps.push(row);\n            for (let c = 0; c < width/sw; c++) {\n                let bitmap = game.add.bitmapData(sw, sh);\n                //bitmap.baseTexture.premultipliedAlpha = false;\n                //bitmap.texture.premultipliedAlpha = false;\n                row.push({\n                    bitmap,\n                    sx: c*sw,\n                    sy: r*sh,\n                    sprite: game.add.sprite(sprite ? c*sw : -1000, r*sh, bitmap)\n                });\n            }\n        }\n        this.dirtyBitmaps = [];\n\n        //todo: for first bitmap only\n        this.regions = [];\n        for (let x = 0; x < sw-REGION_SIZE/2; x += REGION_SIZE/2) {\n            for (let y = 0; y < sh-REGION_SIZE/2; y+= REGION_SIZE/2) {\n                this.regions.push({sx: x, sy: y, w: REGION_SIZE, h: REGION_SIZE});\n            }\n        }\n        console.log(this.regions.length, 'regions');\n    }\n    _bitmap(x,y) {\n        return this.bitmaps[(y/this.sh)|0][(x/this.sw)|0];\n    }\n\n    bitmap(x,y) {\n        return this._bitmap(x,y).bitmap;\n    }\n\n    fill(r, g, b) {\n        this.forEach(bm => bm.fill(r,g,b));\n    }\n\n    setDirty(bitmap, y) {\n        if (y !== undefined) {\n            bitmap = this.bitmap(bitmap, y);\n        }\n        if (!bitmap._ourDirty) {\n            this.dirtyBitmaps.push(bitmap);\n            bitmap._ourDirty = true;\n        }\n    }\n\n    update() {\n        if (options.useRegions) throw new Error('shall not be used');\n        let bm = this.dirtyBitmaps.shift();\n        if (bm) {\n            bm._ourDirty = false;\n            bm.context.putImageData(bm.imageData, 0, 0);\n            bm.dirty = true;\n        }\n    }\n\n    getPixel(x, y, obj = {}) {\n        if (x < 0 || y < 0 || x >= this.width || y >= this.height) {\n            obj.r = 0;\n            obj.g = 0;\n            obj.b = 0;\n            obj.a = 0;\n            obj._outside = true;\n            return obj;\n        } else {\n            obj._outside = false;\n        }\n        let {bitmap, sx, sy} = this._bitmap(x,y);\n        return bitmap.getPixel(x-sx,y-sy,obj);\n    }\n\n    setPixel(x,y,r,g,b,immediate) {\n        let {bitmap, sx, sy} = this._bitmap(x,y);\n        bitmap.setPixel(x-sx,y-sy,r,g,b,immediate);\n        if (!immediate) {\n            this.setDirty(bitmap);\n        }\n    }\n\n    forEach(cb){\n        for (let r = 0; r < this.bitmaps.length; r++) {\n            for (let c = 0; c < this.bitmaps[r].length; c++) {\n                cb(this.bitmaps[r][c].bitmap, r, c);\n            }\n        }\n    }\n\n    updateAll() {\n        this.forEach(b => b.update(0, 0, b.width, b.height));\n    }\n}\n\nconst EMPTY = {value: undefined};\n\nclass Grid {\n    constructor() {\n        this.grid = [];\n        for (let c = 0; c < W/PIX; c++) {\n            let col = [];\n            this.grid.push(col);\n            for (let r = 0; r < H/PIX;r++) {\n                col.push({\n                    value: undefined,\n                    _state: {},\n                    _total: 0\n                });\n            }\n        }\n        this.width = this.grid.length;\n        this.height = this.grid[0].length;\n    }\n\n    get(gx, gy) {\n        if (gx < 0 || gx >= this.grid.length || gy < 0 || gy >= this.grid[gx].length) return undefined;\n        return this.grid[gx][gy].value;\n    }\n    getCell(gx, gy) {\n        if (gx < 0 || gx >= this.grid.length || gy < 0 || gy >= this.grid[gx].length) return EMPTY;\n        return this.grid[gx][gy];\n    }\n\n    set(gx, gy, val) {\n        let oldT = this.grid[gx][gy].value ? 1 : -1;\n        this.grid[gx][gy].value = val;\n        this.grid[gx][gy].dirty = true;\n        let t = val ? 1 : -1;\n        if (t == oldT) return;\n        let y1 = gy > 0;\n        let y2 = gy < this.height-1;\n        if (gx > 0) {\n            this.grid[gx-1][gy]._total += t;\n            if (y1) {\n                this.grid[gx-1][gy - 1]._total += t;\n            }\n            if (y2) {\n                this.grid[gx-1][gy + 1]._total += t;\n            }\n        }\n        if (gx < this.width-1) {\n            this.grid[gx + 1][gy]._total += t;\n            if (y1) {\n                this.grid[gx + 1][gy - 1]._total += t;\n            }\n            if (y2) {\n                this.grid[gx + 1][gy + 1]._total += t;\n            }\n        }\n        {\n            if (y1) {\n                this.grid[gx][gy - 1]._total += t;\n            }\n            if (y2) {\n                this.grid[gx][gy + 1]._total += t;\n            }\n        }\n    }\n\n    getReal(x, y) {\n        return this.get(x >> PIX_SHIFT, y >> PIX_SHIFT);\n    }\n\n    setReal(x, y, val) {\n        this.set(x >> PIX_SHIFT, y >> PIX_SHIFT, val);\n    }\n\n    forEach(cb) {\n        for (let x = 0; x < this.grid.length; x++) {\n            for (let y = 0; y < this.grid[x].length; y++) {\n                cb(this.grid[x][y].value, x, y, this.grid[x][y], x << PIX_SHIFT, y << PIX_SHIFT);\n            }\n        }\n    }\n}\n\nlet particles = [];\n\n\nlet bitmap, grid, growingBitmap, tempCanvas;\nconst W = 1024, H = 1024, PIX = 16, PIX_SHIFT = 4;\nconst PIX_MID = PIX/2;\nconst PIX_B1 = PIX_MID-PIX/4, PIX_B2 = PIX_MID+PIX/4;\nlet buttons;\n\nlet timer;\nlet inited = false;\nlet SX = 12, SY = 12;\n\nlet infection;\nfunction create() {\n    game.stage.backgroundColor = '#cccccc';\n\n    bitmap = new MultiBitmap(W, H);\n    //bitmap.fill(0,0,0);\n    bitmap.updateAll();\n\n    growingBitmap = new MultiBitmap(W, H, MIN_SIZE, MIN_SIZE, false);\n\n    //tempCanvas = (() => {let c = document.createElement('canvas'); c.width=MIN_SIZE; c.height=MIN_SIZE; c.context = c.ctx = c.getContext('2d'); return c;})();\n\n    grid = new Grid();\n\n    grid.set(SX, SY, {i: true});\n    buttons = {\n        Z: game.input.keyboard.addKey(Phaser.Keyboard.Z),\n        X: game.input.keyboard.addKey(Phaser.Keyboard.X),\n        C: game.input.keyboard.addKey(Phaser.Keyboard.C)\n    };\n    prepareParticles();\n\n    timer = game.time.create();\n    timer.loop(options.spawnDelay, () => {\n        let toAdd = [];\n        grid.forEach((val, x, y) => {\n            if (!val) {\n                let total = around(x, y).total;\n                if (total >= 2 && total < 7 && Math.random() < 0.5) {\n                    toAdd.push({x,y});\n                }\n            }\n        });\n        toAdd.forEach(({x,y}) => grid.set(x, y, {i:true}))\n    }, this);\n    infection = new Infection(game);\n    let infTextureSprite = game.add.sprite(-100,-100, 'texture');\n    infection.uniforms.iChannel0.value = infTextureSprite.texture;\n    infection.uniforms.textureSize.value = {x: infTextureSprite.width, y: infTextureSprite.height};\n    infection.uniforms.resolution.value = {x: game.world.width, y: game.world.height};\n    game.world.filters = [infection];\n\n    //bitmap.fill(255,0,0);\n    //timer.start();\n}\n\nlet pix = 0;\nlet recolor = createRecolorer();\n\nlet toRecolor = [], regionsToRecolor;\nconst MAX_RECOLOR = options.useRegions ? options.regionsPerTick : 1;\n\nfunction update() {\n    infection.update();\n    if (!regionsToRecolor) {\n        regionsToRecolor = bitmap.regions.slice();\n    }\n    if (!inited && grid.getCell(SX, SY)._state.growing === true) {\n        grid.set(SX+1, SY, {i: true});\n        inited = true;\n        //timer.start();\n    }\n\n    let mb = bitmap;\n\n    let gx = (game.input.activePointer.x / PIX) | 0, gy = (game.input.activePointer.y / PIX) | 0;\n\n    if (buttons.Z.justDown) {\n        grid.set(gx, gy, {i: true});\n    }\n    if (buttons.X.justDown) {\n        grid.set(gx, gy, undefined);\n    }\n    if (buttons.C.justDown) {\n        console.log(JSON.stringify(grid.getCell(gx, gy), null, 4));\n    }\n\n    growingBitmap.forEach((bm) => {\n        bm._inited = false;\n    });\n    mb.forEach((bm) => {\n        bm._updated = false;\n    });\n\n    updatedCount = 0;\n    grid.forEach((val, gx, gy, cell, x, y) => {\n        if (cell.dirty) {\n            let updated = updateCell(mb, cell, x, y, gx, gy);\n            cell.dirty = updated;\n            updatedCount++;\n        }\n        //todo: optimize. it shall not be in per-cell loop, it is about bitmaps\n        let {bitmap, sx, sy} = mb._bitmap(x, y);\n        if ((cell.value || cell.dirty) && options.doRecolor && !options.useRegions && !bitmap._scheduledForRecolor) {\n            toRecolor.push({bitmap, sx, sy});\n            bitmap._scheduledForRecolor = true;\n        }\n    });\n    growingBitmap.forEach((bm, r, c) => {\n        if (bm._inited) {\n            let resultBitmap = mb.bitmaps[r][c].bitmap;\n            bm.ctx.drawImage(resultBitmap.canvas, 0, 0);\n            resultBitmap.ctx.globalCompositeOperation = \"source-over\";\n            resultBitmap.ctx.drawImage(bm.canvas, 0, 0);\n            resultBitmap.dirty = true;\n        }\n    });\n    if (options.doRecolor) {\n        if (!options.useRegions) {\n            r.innerHTML = \"\";\n            for (let i = 0; i < MAX_RECOLOR && i < toRecolor.length; i++) {\n                let {bitmap, sx, sy} = toRecolor.shift();\n                bitmap._scheduledForRecolor = false;\n                if (!bitmap._updated) {\n                    bitmap.update(0, 0, bitmap.width, bitmap.height);\n                    bitmap._updated = true;\n                }\n                recolor(mb, bitmap, sx, sy, bitmap.width, bitmap.height);\n            }\n            mb.update();\n        }\n        else {\n            r.innerHTML = \"-\";\n            let getDataTime = 0, putDataTime = 0, recolorTime1 = 0, recolorTime2 = 0, recolorTime3 = 0;\n            let onlyBitmap = mb.bitmaps[0][0].bitmap;\n            let count = 0;\n            let checkedPixelsTotal = 0;\n            for (let i = 0; i < MAX_RECOLOR && i < regionsToRecolor.length; i++) {\n                let s1 = new Date().getTime();\n                let region = regionsToRecolor.shift();\n                regionsToRecolor.push(region);\n                if (region.sx == 0 && region.sy == 0) r.innerHTML = \"*\";\n                onlyBitmap.update(region.sx, region.sy, region.w, region.h);\n                let s2 = new Date().getTime();\n                let [t1,t2,updated,checked] = recolor(mb, onlyBitmap, region.sx, region.sy, region.w, region.h, PIX);\n                recolorTime1+= t1;\n                recolorTime2+= t2;\n                let s3 = new Date().getTime();\n                if (updated) {\n                    onlyBitmap.ctx.putImageData(onlyBitmap.imageData, region.sx, region.sy);\n                    onlyBitmap.dirty = true;\n                }\n                checkedPixelsTotal += checked;\n                let s4 = new Date().getTime();\n                getDataTime += (s2-s1);\n                putDataTime += (s4-s3);\n                count++;\n            }\n            times.push([getDataTime, recolorTime1, recolorTime2, recolorTime3, putDataTime]);\n            if (times.length > 60) {\n                getDataTime = recolorTime1 = recolorTime2 = recolorTime3 = putDataTime = 0;\n                for (let [a,b1,b2,b3,c] of times) {\n                    getDataTime += a;\n                    recolorTime1 += b1;\n                    recolorTime2 += b2;\n                    recolorTime3 += b3;\n                    putDataTime += c;\n                }\n                console.log(checkedPixelsTotal, ' =>',  [getDataTime, recolorTime1, recolorTime2, recolorTime3, putDataTime].map(s => (s/60).toFixed(2)).join(\" / \"));\n                times = [];\n            }\n        }\n\n    } else {\n        r.innerHTML = \"\";\n    }\n    r.innerHTML += \" bm: \" + (mb.bitmaps[0][0].bitmap.dirty ? \"dirty\" : \"-\");\n}\nlet times = [];\n\nlet r = document.querySelector(\"#recolor\");\n\nlet updatedCount = 0;\n\nfunction aroundBase(getter, gx, gy) {\n    let res = {\n        total: 0,\n        list: []\n    };\n    for (let ax = -1; ax <= 1; ax++) {\n        //let r = {};\n        //res[ax] = r;\n        for (let ay = -1; ay <= 1; ay++) {\n            let val = /*r[ay] = */getter(gx+ax, gy+ay);\n            if (val && (ay != 0 || ax != 0)) {\n                res.total++;\n                res.list.push({ax, ay, val});\n            }\n        }\n    }\n    return res;\n}\n\nfunction around(gx, gy) {\n    return aroundBase((gx,gy) => grid.get(gx, gy), gx, gy);\n}\n\nfunction aroundGrown(gx, gy) {\n    return aroundBase((gx, gy) => {\n        let cell = grid.getCell(gx, gy);\n        return cell && cell._state && cell._state.growing === true\n    }, gx, gy)\n}\n\n\nfunction prepareParticles() {\n    for (let i = 0; i < 10; i++) {\n        let canvas1 = document.createElement('canvas');\n        document.body.appendChild(canvas1);\n        canvas1.width = PIX;\n        canvas1.height = PIX;\n        let context = canvas1.getContext('2d');\n        //context.globalAlpha = 1;// + 0.1*game.rnd.frac();\n        context.fillStyle = `rgb(${game.rnd.integerInRange(250,255)},0,50)`;\n        context.beginPath();\n        context.arc(PIX / 2, PIX / 2, PIX / 8 * 2, 0, Math.PI * 2);\n        context.fill();\n        context.fillStyle = 'rgba(255,0,255,255)';\n        context.globalCompositeOperation = 'destination-out';\n        context.beginPath();\n        for (let j = 0; j < i*10; j++) {\n            context.rect(\n                game.rnd.integerInRange(0, PIX-1),\n                game.rnd.integerInRange(0, PIX-1),\n                game.rnd.integerInRange(1,2),\n                game.rnd.integerInRange(1,2)\n            );\n        }\n        context.fill();\n        //todo: add some noise\n        canvas1.cache = {};\n        particles.push(canvas1);\n    }\n}\n\nfunction drawParticle(context, x, y, particle, mode) {\n    particle = particle || game.rnd.pick(particles);\n    if (!mode || mode.scale == 1) {\n        context.drawImage(particle, x | 0, y | 0);\n    } else if (mode.scale) {\n\n        if (!particle.cache[mode.scale]) {\n            let oldW = PIX, oldH = PIX, oldMiddle = PIX/2;\n            let newW = (oldW*mode.scale) |0, newH = (oldH*mode.scale)|0;\n            let newMiddle = (newW/2)|0;\n            let diff = newMiddle - oldMiddle;\n            //todo: cache sized particles\n            //console.log(mode, ': ', x,y, '->', newX, newY, newW, newH);\n\n            let c = document.createElement('canvas');\n            c.width = PIX;\n            c.height = PIX;\n            let ctx = c.getContext('2d');\n\n            ctx.drawImage(particle, 0, 0, oldW, oldH, -diff, -diff, newW, newH);\n            particle.cache[mode.scale] = c;\n        }\n        context.drawImage(particle.cache[mode.scale], x|0, y|0);\n\n\n    }\n    //todo: different particles. pre-print and now copy\n}\n\n\nfunction updateCell(mb, cell, x, y, gx, gy) {\n    let {sx, sy, bitmap} = mb._bitmap(x, y);\n    let resultBitmap = bitmap;\n    bitmap = growingBitmap.bitmap(x, y);\n    if (!bitmap._inited) {\n        bitmap.context.clearRect(0, 0, bitmap.width, bitmap.height);\n        bitmap._inited = true;\n    }\n    let ar = aroundGrown(gx, gy);\n    if (!cell._state) {\n        cell._state = {};\n    }\n    const SPEED = 2;\n    const PIX_PER_STEP = 4;\n    if (cell.value) {\n        //growing\n        if (!cell._state.growing) {\n            if (options.showGrid) {\n                bitmap.context.strokeStyle = 'gray';\n                bitmap.context.lineWidth = 1;\n                bitmap.context.strokeRect(x - sx, y - sy, PIX, PIX);\n            }\n            cell._state.delay = game.rnd.integerInRange(0, 5);\n            //need to init\n            if (ar.total == 0) {\n                //console.log('alone');\n                cell._state.growing = [{\n                   particle: game.rnd.pick(particles),\n                    x: x,\n                    y: y,\n                    dx: 0,\n                    dy: 0,\n                    stepsLeft: PIX/2,\n                    skipLeft: (x+y)%SPEED,\n                    size: (stepsLeft) => (1-stepsLeft/PIX*2)*1\n                }];\n                //for now just put cell\n                //drawParticle(bitmap.ctx, x-sx, y-sy);\n                /*bitmap.context.fillStyle = '#ff0000';\n                bitmap.context.beginPath();\n                bitmap.context.arc(x-sx+PIX/2, y-sy+PIX/2, PIX/8*3, 0, Math.PI*2);\n                bitmap.context.fill();\n\n                cell._state.growing = true;*/\n                //bitmap.update(0, 0, bitmap.width, bitmap.height);\n                bitmap.dirty = true;\n            } else {\n                let ps = [];\n                ar.list.forEach(({ax,ay,val}) => {\n                   ps.push({\n                       x: x+ax*PIX+game.rnd.integerInRange(-1,1),\n                       y: y+ay*PIX+game.rnd.integerInRange(-1,1),\n                       dx: -ax*PIX_PER_STEP,\n                       dy: -ay*PIX_PER_STEP,\n                       stepsLeft: PIX/PIX_PER_STEP+1,\n                       particle: game.rnd.pick(particles),\n                       skipLeft: (x+y)%SPEED,\n                       size: (stepsLeft) => { return (Math.abs(((stepsLeft-2)/(PIX/PIX_PER_STEP) - 0.5)))*2*0.5 + 0.5}\n                   });\n                    /*ps.push({\n                        x: x+ax*PIX+game.rnd.integerInRange(-1,1),\n                        y: y+ay*PIX+game.rnd.integerInRange(-1,1),\n                        dx: -ax*2,\n                        dy: -ay*2,\n                        stepsLeft: PIX/2,\n                        particle: game.rnd.pick(particles),\n                        skipLeft: 0\n                    });\n                    ps.push({\n                        x: x+ax*PIX+game.rnd.integerInRange(-1,1),\n                        y: y+ay*PIX+game.rnd.integerInRange(-1,1),\n                        dx: -ax,\n                        dy: -ay,\n                        stepsLeft: PIX,\n                        particle: game.rnd.pick(particles),\n                        skipLeft: 0\n                    });*/\n                });\n                cell._state.growing = ps;\n            }\n\n        }\n        delete cell._state.reducing;\n        if (cell._state.delay-->0) return true;\n\n        if ( cell._state.growing !== true) {\n            let somethingChanged = 0;\n            cell._state.growing.forEach(part => {\n                //todo: between-canvases\n                if (part.skipLeft == 0) {\n                    part.skipLeft = SPEED;\n                } else {\n                    part.skipLeft--;\n                    return;\n                }\n                bitmap.ctx.globalCompositeOperation = \"source-over\";\n               drawParticle(bitmap.ctx, part.x-sx, part.y-sy, part.particle, {scale: part.size(part.stepsLeft)});\n                //debug\n                //bitmap.context.strokeStyle = 'black';\n                //bitmap.context.moveTo(100+part.x-sx,part.y-sy);\n               part.x += part.dx + Math.sign(part.dx)*game.rnd.pick([0,0,0,0,0,-1,1]);\n               part.y += part.dy + Math.sign(part.dy)*game.rnd.pick([0,0,0,0,0,-1,1]);\n                //bitmap.context.lineTo(100+part.x-sx,part.y-sy);\n                //bitmap.context.stroke();\n               part.stepsLeft--;\n               if (part.stepsLeft == 0) {\n                   cell._state.growing = true;\n                   //bitmap.update(0, 0, bitmap.width, bitmap.height);\n               }\n                somethingChanged++;\n            });\n            if (somethingChanged) {\n                bitmap.dirty = true;\n            }\n        } else {\n            return false;\n        }\n    } else {\n        if (!cell._state.reducing) {\n            if (ar.total == 0) {\n                //todo: animate;\n                cell._state.reducing = [{\n                    x: x,\n                    y: y,\n                    dx: 0,\n                    dy: 0,\n                    particle: particles[0],\n                    stepsLeft: PIX,\n                    skipLeft: (x+y)%SPEED,\n                    size: (stepsLeft) => (1-stepsLeft/PIX)*1.5\n                }];\n            } else {\n                let ps = [];\n                ar.list.forEach(({ax,ay,val}) => {\n                    ps.push({\n                        x: x,\n                        y: y,\n                        dx: ax*PIX_PER_STEP/2,\n                        dy: ay*PIX_PER_STEP/2,\n                        stepsLeft: PIX/PIX_PER_STEP+1,\n                        particle: particles[0],\n                        skipLeft: (x+y)%SPEED,\n                        size: (stepsLeft) => { return 1}\n                    });\n                });\n                ps.push({\n                    x: x,\n                    y: y,\n                    dx: 0,\n                    dy: 0,\n                    particle: particles[0],\n                    stepsLeft: PIX/2,\n                    skipLeft: (x+y)%SPEED,\n                    size: (stepsLeft) => (1-stepsLeft/PIX*2)*1.5\n                });\n\n                cell._state.reducing = ps;\n            }\n            //bitmap.ctx.fillStyle = 'rgba(255,0,0,0)';\n            //bitmap.ctx.fillRect(x-sx, y-sy, PIX, PIX);\n            bitmap.dirty = true;\n            //bitmap.update(0, 0, bitmap.width, bitmap.height);\n            delete cell._state.growing;\n        }\n        if (cell._state.reducing === true) {\n            return false;\n        } else {\n            let somethingChanged = 0;\n            resultBitmap.ctx.globalCompositeOperation = \"destination-out\";\n            cell._state.reducing.forEach(part => {\n                //todo: between-canvases\n                if (part.skipLeft == 0) {\n                    part.skipLeft = SPEED;\n                } else {\n                    part.skipLeft--;\n                    return;\n                }\n                drawParticle(resultBitmap.ctx, part.x-sx, part.y-sy, part.particle, {scale: part.size(part.stepsLeft)});\n                //debug\n                //bitmap.context.strokeStyle = 'black';\n                //bitmap.context.moveTo(100+part.x-sx,part.y-sy);\n                part.x += part.dx + Math.sign(part.dx)*game.rnd.pick([0,0,0,0,0,-1,1]);\n                part.y += part.dy + Math.sign(part.dy)*game.rnd.pick([0,0,0,0,0,-1,1]);\n                //bitmap.context.lineTo(100+part.x-sx,part.y-sy);\n                //bitmap.context.stroke();\n                part.stepsLeft--;\n                if (part.stepsLeft == 0) {\n                    cell._state.reducing = true;\n                    //bitmap.update(0, 0, bitmap.width, bitmap.height);\n                }\n                somethingChanged++;\n            });\n            if (somethingChanged) {\n                resultBitmap.dirty = true;\n            }\n        }\n\n    }\n        //bitmap.ctx.fillStyle = cell.value ? \"red\" : \"black\";\n    //bitmap.ctx.fillRect(x-sx,y-sy,PIX,PIX);\n\n\n    return true;\n}\n\n\nfunction createRecolorer() {\n\n    let neiColors = [];\n    let neiColors1 = [];\n\n    const RADIUS = options.recolorRadius;\n\n    if (options.recolorMode == 1) {\n        for (let x = -RADIUS; x <= RADIUS; x++) {\n            for (let y = -RADIUS; y <= RADIUS; y++) {\n                let nei = {x, y, color: {}};\n                if (Math.hypot(x, y) <= RADIUS) neiColors.push(nei);\n            }\n        }\n    } else if (options.recolorMode == 2) {\n        neiColors.push({x:-2,y:+1,color:{}});\n        neiColors.push({x:+1,y:-2,color:{}});\n        neiColors.push({x:-1,y:-2,color:{}});\n        neiColors.push({x:0,y:+1,color:{}});\n    } else if (options.recolorMode == 3) {\n        neiColors.push({x:-RADIUS,y:0,color:{}});\n        neiColors.push({x:RADIUS,y:0,color:{}});\n        neiColors.push({x:0,y:-RADIUS,color:{}});\n        neiColors.push({x:0,y:RADIUS,color:{}});\n\n    }\n\n\n    neiColors1.push({x:-1,y:0,color:{}});\n    neiColors1.push({x:+1,y:0,color:{}});\n    neiColors1.push({x:0,y:-1,color:{}});\n    neiColors1.push({x:0,y:+1,color:{}});\n\n\n\n    let aroundCache = {};\n\n\n    function recolorAll(mb, bitmap, sx, sy, width, height, pad = 0) {\n        const RSTEP = 16;\n        const SSTEP = 8;\n\n        let data = bitmap.imageData.data;\n        let len = data.length;\n        let row = width * 4;\n\n        let updates = [];\n        let checked = 0;\n        let x = 0, y = 0;\n        let s1 = new Date().getTime();\n        aroundCache = {};\n        var red, blue, green, alpha, maxR, minR, gx = 0, gy = 0, cell;\n        let updatesCount = 0;\n        var ni, nc, nred, ii;\n\n        let maxSkip = options.splitRegion;\n        let skip = game.rnd.integerInRange(0, maxSkip-1);\n\n        for (let i = 0; i < len; i+= 4) {\n            if (x < pad || x > width-pad || y < pad || y > height-pad) {\n                x++;\n                skip++;\n                if (x >= width) {\n                    x = 0;\n                    y++;\n                }\n                continue;\n            }\n\n            red = data[i];\n            blue = data[i+2];\n            green = data[i+1];\n            maxR = red;\n            minR = red;\n            alpha = data[i+3];\n\n            gx = (sx+x)>>PIX_SHIFT;// 0;// ((sx+x)/PIX) |0;\n            gy = (sy+y)>>PIX_SHIFT;//0;// ((sy+y)/PIX) |0;\n            cell = grid.grid[gx][gy];\n            //if (cell._total == 8) console.log(gx,gy);\n\n            if (green && red && alpha < 250) {\n                data[i+3] += 5;\n                updatesCount++;\n            }\n            //if (alpha > 100) {\n\n            if (!red) {\n                if (cell.value && cell._total == 8) {\n                    let redAround = false;\n                    for (ni = 0; ni < neiColors1.length; ni++) {\n                        nc = neiColors1[ni];\n                        ii = i + nc.x * 4 + nc.y * row;\n                        if (ii >= 0 && ii <= len - 4 && data[ii]) {\n                            redAround = true;\n                            break;\n                        }\n                    }\n                    if (redAround) {\n                        updates.push({i, r: 255, g: 3});\n                    }\n                }\n            } else {\n                if (!cell.value) {\n                    if (cell._total === 0 || cell._state.reducing === true) {\n\n                        if (blue >= 30) {\n                            updates.push({i, del: true});\n                        } else {\n                            let emptyAround = false;\n                            for (ni = 0; ni < neiColors1.length; ni++) {\n                                nc = neiColors1[ni];\n                                ii = i + nc.x * 4 + nc.y * row;\n                                if (ii >= 0 && ii <= len - 4 && data[ii + 3] < 100) {\n                                    emptyAround = true;\n                                    break;\n                                }\n                            }\n                            if (emptyAround) updates.push({i, b: Math.min(251, blue + 10)});\n                        }\n                    }\n                } else if (alpha > 100 && skip%maxSkip == 0) {\n                    checked++;\n                    for (ni = 0; ni < neiColors.length; ni++) {\n                        nc = neiColors[ni];\n                        ii = i + nc.x * 4 + nc.y * row;\n                        if (ii >= 0 && ii <= len - 4) {\n                            nred = data[ii];\n                            if (nred > maxR) maxR = nred;\n                            if (nred < minR) minR = nred;\n                        }\n\n                    }\n                    let outR = 0;\n                    if (minR == 0) {\n                        outR = 255;\n                    } else {\n                        outR = Math.max(RSTEP, maxR - RSTEP);\n                    }\n                    if (Math.abs(outR - red) >= SSTEP) {\n                        var sgn = Math.sign(outR - red);\n                        if (sgn > 0) sgn *= 2;\n                        updates.push({i, r: Math.floor(red + SSTEP * sgn)});\n                    }\n\n                }\n            }\n            //}\n\n            x++;\n            skip++;\n            if (x >= width) {\n                x = 0;\n                y++;\n            }\n        }\n        let s2 = new Date().getTime();\n\n        if (updates.length) {\n            for (let ui = 0; ui < updates.length; ui++) {\n                let up = updates[ui];\n\n                if (up.del) {\n                    data[up.i+3] = 0;\n                    data[up.i] = 0;\n                } else if (up.b) {\n                    data[up.i] = 255-up.b;\n                    data[up.i+1] = 0;\n                    data[up.i+2] = up.b;\n                } else if (up.r) {\n                    data[up.i] = up.r;\n                    if (up.g) {\n                        //console.log(up.i, 'set up green', up.g, 'from', data[up.i+1]);\n                        data[up.i+1] = up.g;\n                        data[up.i+3] = 100;\n                    }\n                }\n            }\n            //console.log('updated');\n            if (!options.useRegions) mb.setDirty(bitmap);\n        }\n        let s3 = new Date().getTime();\n\n        return [s2-s1,s3-s2,updates.length + updatesCount,checked];\n    }\n\n    return recolorAll;\n}\n\nlet fpsEl = document.querySelector(\"#fps\");\nfunction debugRender1() {\n    fpsEl.innerText = game.time.fps + \" updated: \" + updatedCount;\n    //game.debug.text(game.time.fps, game.camera.width/2,25);\n}\n\nlet started = false;\ndocument.querySelector(\"#start\").addEventListener(\"click\", () => {\n    if (started) timer.resume(); else timer.start();\n    started = true;\n});\ndocument.querySelector(\"#stop\").addEventListener(\"click\", () => timer.pause());"]}