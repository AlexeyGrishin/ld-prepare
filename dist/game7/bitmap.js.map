{"version":3,"sources":["../../game7/bitmap.js"],"names":["preload","game","time","advancedTiming","MIN_SIZE","REGION_SIZE","options","initOptions","doRecolor","useRegions","regionsPerTick","recolorMode","recolorRadius","spawnDelay","MultiBitmap","width","height","sw","sh","sprite","bitmaps","r","row","push","c","bitmap","add","bitmapData","sx","sy","dirtyBitmaps","regions","x","y","w","h","_bitmap","g","b","forEach","bm","fill","undefined","_ourDirty","shift","context","putImageData","imageData","dirty","obj","a","_outside","getPixel","immediate","setPixel","setDirty","cb","length","update","Grid","grid","W","PIX","col","H","value","_state","gx","gy","val","get","set","particles","growingBitmap","tempCanvas","PIX_MID","PIX_B1","PIX_B2","buttons","timer","inited","SX","SY","create","stage","backgroundColor","updateAll","i","Z","input","keyboard","addKey","Phaser","Keyboard","X","prepareParticles","loop","toAdd","total","around","Math","random","pix","recolor","createRecolorer","toRecolor","regionsToRecolor","MAX_RECOLOR","slice","getCell","growing","mb","activePointer","justDown","_inited","_updated","updatedCount","cell","updated","updateCell","_scheduledForRecolor","resultBitmap","ctx","drawImage","canvas","globalCompositeOperation","region","onlyBitmap","aroundBase","getter","res","list","ax","ay","aroundGrown","canvas1","document","createElement","body","appendChild","getContext","fillStyle","rnd","integerInRange","beginPath","arc","PI","j","rect","cache","drawParticle","particle","mode","pick","scale","oldW","oldH","oldMiddle","newW","newH","newMiddle","diff","clearRect","ar","SPEED","PIX_PER_STEP","dx","dy","stepsLeft","skipLeft","size","ps","abs","reducing","somethingChanged","part","sign","neiColors","neiColors1","RADIUS","nei","color","hypot","aroundCache","recolorAll","pad","RSTEP","SSTEP","data","len","updates","red","blue","maxR","minR","redAround","ni","ii","del","min","nred","outR","max","floor","ui","up","fpsEl","querySelector","debugRender1","innerText","fps","started","addEventListener","resume","start","pause"],"mappings":"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","file":"bitmap.js","sourcesContent":["function preload() {\n    game.time.advancedTiming = true;\n}\nconst MIN_SIZE = 1024;\n\nconst REGION_SIZE = 128;\n\nlet options = initOptions({\n    doRecolor: [\"boolean\", true],\n    useRegions: [\"boolean\", true],\n    regionsPerTick: [\"int\", 8],\n    recolorMode: [\"int\", 1],\n    recolorRadius: [\"int\", 2],\n    spawnDelay: [\"int\", 1000]\n});\n\n\nclass MultiBitmap {\n    constructor(width, height, sw = MIN_SIZE, sh = MIN_SIZE, sprite = true) {\n        this.width = width;\n        this.height = height;\n        this.sw = sw;\n        this.sh = sh;\n        this.bitmaps = [];\n        for (let r = 0; r < height/sh; r++) {\n            let row = [];\n            this.bitmaps.push(row);\n            for (let c = 0; c < width/sw; c++) {\n                let bitmap = game.add.bitmapData(sw, sh);\n                row.push({\n                    bitmap,\n                    sx: c*sw,\n                    sy: r*sh,\n                    sprite: game.add.sprite(sprite ? c*sw : -1000, r*sh, bitmap)\n                });\n            }\n        }\n        this.dirtyBitmaps = [];\n\n        //todo: for first bitmap only\n        this.regions = [];\n        for (let x = 0; x < sw; x += REGION_SIZE/2) {\n            for (let y = 0; y < sh; y+= REGION_SIZE/2) {\n                this.regions.push({sx: x, sy: y, w: REGION_SIZE, h: REGION_SIZE});\n            }\n        }\n    }\n    _bitmap(x,y) {\n        return this.bitmaps[(y/this.sh)|0][(x/this.sw)|0];\n    }\n\n    bitmap(x,y) {\n        return this._bitmap(x,y).bitmap;\n    }\n\n    fill(r, g, b) {\n        this.forEach(bm => bm.fill(r,g,b));\n    }\n\n    setDirty(bitmap, y) {\n        if (y !== undefined) {\n            bitmap = this.bitmap(bitmap, y);\n        }\n        if (!bitmap._ourDirty) {\n            this.dirtyBitmaps.push(bitmap);\n            bitmap._ourDirty = true;\n        }\n    }\n\n    update() {\n        let bm = this.dirtyBitmaps.shift();\n        if (bm) {\n            bm._ourDirty = false;\n            bm.context.putImageData(bm.imageData, 0, 0);\n            bm.dirty = true;\n        }\n    }\n\n    getPixel(x, y, obj = {}) {\n        if (x < 0 || y < 0 || x >= this.width || y >= this.height) {\n            obj.r = 0;\n            obj.g = 0;\n            obj.b = 0;\n            obj.a = 0;\n            obj._outside = true;\n            return obj;\n        } else {\n            obj._outside = false;\n        }\n        let {bitmap, sx, sy} = this._bitmap(x,y);\n        return bitmap.getPixel(x-sx,y-sy,obj);\n    }\n\n    setPixel(x,y,r,g,b,immediate) {\n        let {bitmap, sx, sy} = this._bitmap(x,y);\n        bitmap.setPixel(x-sx,y-sy,r,g,b,immediate);\n        if (!immediate) {\n            this.setDirty(bitmap);\n        }\n    }\n\n    forEach(cb){\n        for (let r = 0; r < this.bitmaps.length; r++) {\n            for (let c = 0; c < this.bitmaps[r].length; c++) {\n                cb(this.bitmaps[r][c].bitmap, r, c);\n            }\n        }\n    }\n\n    updateAll() {\n        this.forEach(b => b.update(0, 0, b.width, b.height));\n    }\n}\n\nclass Grid {\n    constructor() {\n        this.grid = [];\n        for (let c = 0; c < W/PIX; c++) {\n            let col = [];\n            this.grid.push(col);\n            for (let r = 0; r < H/PIX;r++) {\n                col.push({value: undefined, _state: {}});\n            }\n        }\n    }\n\n    get width() { return this.grid.length;}\n    get height() { return this.grid[0].length;}\n\n    get(gx, gy) {\n        if (gx < 0 || gx >= this.grid.length || gy < 0 || gy >= this.grid[gx].length) return undefined;\n        return this.grid[gx][gy].value;\n    }\n    getCell(gx, gy) {\n        if (gx < 0 || gx >= this.grid.length || gy < 0 || gy >= this.grid[gx].length) return {value: undefined};\n        return this.grid[gx][gy];\n    }\n\n    set(gx, gy, val) {\n        this.grid[gx][gy].value = val;\n        this.grid[gx][gy].dirty = true;\n    }\n\n    getReal(x, y) {\n        return this.get((x/PIX)|0, (y/PIX)|0);\n    }\n\n    setReal(x, y, val) {\n        this.set((x/PIX)|0, (y/PIX)|0, val);\n    }\n\n    forEach(cb) {\n        for (let x = 0; x < this.grid.length; x++) {\n            for (let y = 0; y < this.grid[x].length; y++) {\n                cb(this.grid[x][y].value, x, y, this.grid[x][y], x*PIX, y*PIX);\n            }\n        }\n    }\n}\n\nlet particles = [];\n\n\nlet bitmap, grid, growingBitmap, tempCanvas;\nconst W = 1024, H = 1024, PIX = 16;\nconst PIX_MID = PIX/2;\nconst PIX_B1 = PIX_MID-PIX/4, PIX_B2 = PIX_MID+PIX/4;\nlet buttons;\n\nlet timer;\nlet inited = false;\nlet SX = 12, SY = 12;\nfunction create() {\n    game.stage.backgroundColor = '#cccccc';\n\n    bitmap = new MultiBitmap(W, H);\n    //bitmap.fill(0,0,0);\n    bitmap.updateAll();\n\n    growingBitmap = new MultiBitmap(W, H, MIN_SIZE, MIN_SIZE, false);\n\n    //tempCanvas = (() => {let c = document.createElement('canvas'); c.width=MIN_SIZE; c.height=MIN_SIZE; c.context = c.ctx = c.getContext('2d'); return c;})();\n\n    grid = new Grid();\n\n    grid.set(SX, SY, {i: true});\n    buttons = {\n        Z: game.input.keyboard.addKey(Phaser.Keyboard.Z),\n        X: game.input.keyboard.addKey(Phaser.Keyboard.X)\n    };\n    prepareParticles();\n\n    timer = game.time.create();\n    timer.loop(options.spawnDelay, () => {\n        let toAdd = [];\n        grid.forEach((val, x, y) => {\n            if (!val) {\n                let total = around(x, y).total;\n                if (total >= 2 && total < 7 && Math.random() < 0.5) {\n                    toAdd.push({x,y});\n                }\n            }\n        });\n        toAdd.forEach(({x,y}) => grid.set(x, y, {i:true}))\n    }, this);\n    //timer.start();\n}\n\nlet pix = 0;\nlet recolor = createRecolorer();\n\nlet toRecolor = [], regionsToRecolor;\nconst MAX_RECOLOR = options.useRegions ? options.regionsPerTick : 1;\n\nfunction update() {\n    if (!regionsToRecolor) {\n        regionsToRecolor = bitmap.regions.slice();\n    }\n    if (!inited && grid.getCell(SX, SY)._state.growing === true) {\n        grid.set(SX+1, SY, {i: true});\n        inited = true;\n        //timer.start();\n    }\n\n    let mb = bitmap;\n\n    let gx = (game.input.activePointer.x / PIX) | 0, gy = (game.input.activePointer.y / PIX) | 0;\n\n    if (buttons.Z.justDown) {\n        grid.set(gx, gy, {i: true});\n    }\n    if (buttons.X.justDown) {\n        grid.set(gx, gy, undefined);\n    }\n\n    growingBitmap.forEach((bm) => {\n        bm._inited = false;\n    });\n    mb.forEach((bm) => {\n        bm._updated = false;\n    });\n\n    updatedCount = 0;\n    grid.forEach((val, gx, gy, cell, x, y) => {\n        if (cell.dirty) {\n            let updated = updateCell(mb, cell, x, y, gx, gy);\n            cell.dirty = updated;\n            updatedCount++;\n        }\n        //todo: optimize. it shall not be in per-cell loop, it is about bitmaps\n        let {bitmap, sx, sy} = mb._bitmap(x, y);\n        if ((cell.value || cell.dirty) && options.doRecolor && !options.useRegions && !bitmap._scheduledForRecolor) {\n            toRecolor.push({bitmap, sx, sy});\n            bitmap._scheduledForRecolor = true;\n        }\n    });\n    growingBitmap.forEach((bm, r, c) => {\n        if (bm._inited) {\n            let resultBitmap = mb.bitmaps[r][c].bitmap;\n            bm.ctx.drawImage(resultBitmap.canvas, 0, 0);\n            resultBitmap.ctx.globalCompositeOperation = \"source-over\";\n            resultBitmap.ctx.drawImage(bm.canvas, 0, 0);\n            resultBitmap.dirty = true;\n        }\n    });\n    if (options.doRecolor) {\n        if (!options.useRegions) {\n            for (let i = 0; i < MAX_RECOLOR && i < toRecolor.length; i++) {\n                let {bitmap, sx, sy} = toRecolor.shift();\n                bitmap._scheduledForRecolor = false;\n                if (!bitmap._updated) {\n                    bitmap.update(0, 0, bitmap.width, bitmap.height);\n                    bitmap._updated = true;\n                }\n                recolor(mb, bitmap, sx, sy, bitmap.width, bitmap.height);\n            }\n            mb.update();\n        }\n        else {\n            for (let i = 0; i < MAX_RECOLOR && i < regionsToRecolor.length; i++) {\n                let region = regionsToRecolor.shift();\n                regionsToRecolor.push(region);\n                let onlyBitmap = mb.bitmaps[0][0].bitmap;\n                onlyBitmap.update(region.sx, region.sy, region.w, region.h);\n                recolor(mb, onlyBitmap, region.sx, region.sy, region.w, region.h, PIX);\n                onlyBitmap.ctx.putImageData(onlyBitmap.imageData, region.sx, region.sy);\n                onlyBitmap.dirty = true;\n            }\n        }\n\n    }\n\n\n}\n\nlet updatedCount = 0;\n\nfunction aroundBase(getter, gx, gy) {\n    let res = {\n        total: 0,\n        list: []\n    };\n    for (let ax = -1; ax <= 1; ax++) {\n        //let r = {};\n        //res[ax] = r;\n        for (let ay = -1; ay <= 1; ay++) {\n            let val = /*r[ay] = */getter(gx+ax, gy+ay);\n            if (val && (ay != 0 || ax != 0)) {\n                res.total++;\n                res.list.push({ax, ay, val});\n            }\n        }\n    }\n    return res;\n}\n\nfunction around(gx, gy) {\n    return aroundBase((gx,gy) => grid.get(gx, gy), gx, gy);\n}\n\nfunction aroundGrown(gx, gy) {\n    return aroundBase((gx, gy) => {\n        let cell = grid.getCell(gx, gy);\n        return cell && cell._state && cell._state.growing === true\n    }, gx, gy)\n}\n\n\nfunction prepareParticles() {\n    for (let i = 0; i < 10; i++) {\n        let canvas1 = document.createElement('canvas');\n        document.body.appendChild(canvas1);\n        canvas1.width = PIX;\n        canvas1.height = PIX;\n        let context = canvas1.getContext('2d');\n        //context.globalAlpha = 1;// + 0.1*game.rnd.frac();\n        context.fillStyle = `rgb(${game.rnd.integerInRange(250,255)},0,50)`;\n        context.beginPath();\n        context.arc(PIX / 2, PIX / 2, PIX / 8 * 2, 0, Math.PI * 2);\n        context.fill();\n        context.fillStyle = 'rgba(255,0,255,255)';\n        context.globalCompositeOperation = 'destination-out';\n        context.beginPath();\n        for (let j = 0; j < i*10; j++) {\n            context.rect(\n                game.rnd.integerInRange(0, PIX-1),\n                game.rnd.integerInRange(0, PIX-1),\n                game.rnd.integerInRange(1,2),\n                game.rnd.integerInRange(1,2)\n            );\n        }\n        context.fill();\n        //todo: add some noise\n        canvas1.cache = {};\n        particles.push(canvas1);\n    }\n}\n\nfunction drawParticle(context, x, y, particle, mode) {\n    particle = particle || game.rnd.pick(particles);\n    if (!mode || mode.scale == 1) {\n        context.drawImage(particle, x | 0, y | 0);\n    } else if (mode.scale) {\n\n        if (!particle.cache[mode.scale]) {\n            let oldW = PIX, oldH = PIX, oldMiddle = PIX/2;\n            let newW = (oldW*mode.scale) |0, newH = (oldH*mode.scale)|0;\n            let newMiddle = (newW/2)|0;\n            let diff = newMiddle - oldMiddle;\n            //todo: cache sized particles\n            //console.log(mode, ': ', x,y, '->', newX, newY, newW, newH);\n\n            let c = document.createElement('canvas');\n            c.width = PIX;\n            c.height = PIX;\n            let ctx = c.getContext('2d');\n\n            ctx.drawImage(particle, 0, 0, oldW, oldH, -diff, -diff, newW, newH);\n            particle.cache[mode.scale] = c;\n        }\n        context.drawImage(particle.cache[mode.scale], x|0, y|0);\n\n\n    }\n    //todo: different particles. pre-print and now copy\n}\n\n\nfunction updateCell(mb, cell, x, y, gx, gy) {\n    let {sx, sy, bitmap} = mb._bitmap(x, y);\n    let resultBitmap = bitmap;\n    bitmap = growingBitmap.bitmap(x, y);\n    if (!bitmap._inited) {\n        bitmap.context.clearRect(0, 0, bitmap.width, bitmap.height);\n        bitmap._inited = true;\n    }\n    let ar = aroundGrown(gx, gy);\n    if (!cell._state) {\n        cell._state = {};\n    }\n    const SPEED = 2;\n    const PIX_PER_STEP = 4;\n    if (cell.value) {\n        //growing\n        if (!cell._state.growing) {\n            //bitmap.context.strokeStyle = 'red';\n            //bitmap.context.strokeRect(x-sx,y-sy,PIX,PIX);\n            //need to init\n            if (ar.total == 0) {\n                //console.log('alone');\n                cell._state.growing = [{\n                   particle: particles[0],\n                    x: x,\n                    y: y,\n                    dx: 0,\n                    dy: 0,\n                    stepsLeft: PIX/2,\n                    skipLeft: (x+y)%SPEED,\n                    size: (stepsLeft) => (1-stepsLeft/PIX*2)*1\n                }];\n                //for now just put cell\n                //drawParticle(bitmap.ctx, x-sx, y-sy);\n                /*bitmap.context.fillStyle = '#ff0000';\n                bitmap.context.beginPath();\n                bitmap.context.arc(x-sx+PIX/2, y-sy+PIX/2, PIX/8*3, 0, Math.PI*2);\n                bitmap.context.fill();\n\n                cell._state.growing = true;*/\n                //bitmap.update(0, 0, bitmap.width, bitmap.height);\n                bitmap.dirty = true;\n            } else {\n                let ps = [];\n                ar.list.forEach(({ax,ay,val}) => {\n                   ps.push({\n                       x: x+ax*PIX+game.rnd.integerInRange(-1,1),\n                       y: y+ay*PIX+game.rnd.integerInRange(-1,1),\n                       dx: -ax*PIX_PER_STEP,\n                       dy: -ay*PIX_PER_STEP,\n                       stepsLeft: PIX/PIX_PER_STEP+1,\n                       particle: game.rnd.pick(particles),\n                       skipLeft: (x+y)%SPEED,\n                       size: (stepsLeft) => { return (Math.abs(((stepsLeft-2)/(PIX/PIX_PER_STEP) - 0.5)))*2*0.5 + 0.5}\n                   });\n                    /*ps.push({\n                        x: x+ax*PIX+game.rnd.integerInRange(-1,1),\n                        y: y+ay*PIX+game.rnd.integerInRange(-1,1),\n                        dx: -ax*2,\n                        dy: -ay*2,\n                        stepsLeft: PIX/2,\n                        particle: game.rnd.pick(particles),\n                        skipLeft: 0\n                    });\n                    ps.push({\n                        x: x+ax*PIX+game.rnd.integerInRange(-1,1),\n                        y: y+ay*PIX+game.rnd.integerInRange(-1,1),\n                        dx: -ax,\n                        dy: -ay,\n                        stepsLeft: PIX,\n                        particle: game.rnd.pick(particles),\n                        skipLeft: 0\n                    });*/\n                });\n                cell._state.growing = ps;\n            }\n\n        }\n        delete cell._state.reducing;\n\n        if ( cell._state.growing !== true) {\n            let somethingChanged = 0;\n            cell._state.growing.forEach(part => {\n                //todo: between-canvases\n                if (part.skipLeft == 0) {\n                    part.skipLeft = SPEED;\n                } else {\n                    part.skipLeft--;\n                    return;\n                }\n                bitmap.ctx.globalCompositeOperation = \"source-over\";\n               drawParticle(bitmap.ctx, part.x-sx, part.y-sy, part.particle, {scale: part.size(part.stepsLeft)});\n                //debug\n                //bitmap.context.strokeStyle = 'black';\n                //bitmap.context.moveTo(100+part.x-sx,part.y-sy);\n               part.x += part.dx + Math.sign(part.dx)*game.rnd.pick([0,0,0,0,0,-1,1]);\n               part.y += part.dy + Math.sign(part.dy)*game.rnd.pick([0,0,0,0,0,-1,1]);\n                //bitmap.context.lineTo(100+part.x-sx,part.y-sy);\n                //bitmap.context.stroke();\n               part.stepsLeft--;\n               if (part.stepsLeft == 0) {\n                   cell._state.growing = true;\n                   //bitmap.update(0, 0, bitmap.width, bitmap.height);\n               }\n                somethingChanged++;\n            });\n            if (somethingChanged) {\n                bitmap.dirty = true;\n            }\n        } else {\n            return false;\n        }\n    } else {\n        if (!cell._state.reducing) {\n            if (ar.total == 0) {\n                //todo: animate;\n                cell._state.reducing = [{\n                    x: x,\n                    y: y,\n                    dx: 0,\n                    dy: 0,\n                    particle: particles[0],\n                    stepsLeft: PIX,\n                    skipLeft: (x+y)%SPEED,\n                    size: (stepsLeft) => (1-stepsLeft/PIX)*1.5\n                }];\n            } else {\n                let ps = [];\n                ar.list.forEach(({ax,ay,val}) => {\n                    ps.push({\n                        x: x,\n                        y: y,\n                        dx: ax*PIX_PER_STEP/2,\n                        dy: ay*PIX_PER_STEP/2,\n                        stepsLeft: PIX/PIX_PER_STEP+1,\n                        particle: particles[0],\n                        skipLeft: (x+y)%SPEED,\n                        size: (stepsLeft) => { return 1}\n                    });\n                });\n                ps.push({\n                    x: x,\n                    y: y,\n                    dx: 0,\n                    dy: 0,\n                    particle: particles[0],\n                    stepsLeft: PIX/2,\n                    skipLeft: (x+y)%SPEED,\n                    size: (stepsLeft) => (1-stepsLeft/PIX*2)*1.5\n                });\n\n                cell._state.reducing = ps;\n            }\n            //bitmap.ctx.fillStyle = 'rgba(255,0,0,0)';\n            //bitmap.ctx.fillRect(x-sx, y-sy, PIX, PIX);\n            bitmap.dirty = true;\n            //bitmap.update(0, 0, bitmap.width, bitmap.height);\n            delete cell._state.growing;\n        }\n        if (cell._state.reducing === true) {\n            return false;\n        } else {\n            let somethingChanged = 0;\n            resultBitmap.ctx.globalCompositeOperation = \"destination-out\";\n            cell._state.reducing.forEach(part => {\n                //todo: between-canvases\n                if (part.skipLeft == 0) {\n                    part.skipLeft = SPEED;\n                } else {\n                    part.skipLeft--;\n                    return;\n                }\n                drawParticle(resultBitmap.ctx, part.x-sx, part.y-sy, part.particle, {scale: part.size(part.stepsLeft)});\n                //debug\n                //bitmap.context.strokeStyle = 'black';\n                //bitmap.context.moveTo(100+part.x-sx,part.y-sy);\n                part.x += part.dx + Math.sign(part.dx)*game.rnd.pick([0,0,0,0,0,-1,1]);\n                part.y += part.dy + Math.sign(part.dy)*game.rnd.pick([0,0,0,0,0,-1,1]);\n                //bitmap.context.lineTo(100+part.x-sx,part.y-sy);\n                //bitmap.context.stroke();\n                part.stepsLeft--;\n                if (part.stepsLeft == 0) {\n                    cell._state.reducing = true;\n                    //bitmap.update(0, 0, bitmap.width, bitmap.height);\n                }\n                somethingChanged++;\n            });\n            if (somethingChanged) {\n                resultBitmap.dirty = true;\n            }\n        }\n\n    }\n        //bitmap.ctx.fillStyle = cell.value ? \"red\" : \"black\";\n    //bitmap.ctx.fillRect(x-sx,y-sy,PIX,PIX);\n\n\n    return true;\n}\n\n\nfunction createRecolorer() {\n\n    let neiColors = [];\n    let neiColors1 = [];\n\n    const RADIUS = options.recolorRadius;\n\n    if (options.recolorMode == 1) {\n        for (let x = -RADIUS; x <= RADIUS; x++) {\n            for (let y = -RADIUS; y <= RADIUS; y++) {\n                let nei = {x, y, color: {}};\n                if (Math.hypot(x, y) <= RADIUS) neiColors.push(nei);\n            }\n        }\n    } else if (options.recolorMode == 2) {\n        neiColors.push({x:-2,y:+1,color:{}});\n        neiColors.push({x:+1,y:-2,color:{}});\n        neiColors.push({x:-1,y:-2,color:{}});\n        neiColors.push({x:0,y:+1,color:{}});\n    } else if (options.recolorMode == 3) {\n        neiColors.push({x:-RADIUS,y:0,color:{}});\n        neiColors.push({x:RADIUS,y:0,color:{}});\n        neiColors.push({x:0,y:-RADIUS,color:{}});\n        neiColors.push({x:0,y:RADIUS,color:{}});\n\n    }\n\n\n    neiColors1.push({x:-1,y:0,color:{}});\n    neiColors1.push({x:+1,y:0,color:{}});\n    neiColors1.push({x:0,y:-1,color:{}});\n    neiColors1.push({x:0,y:+1,color:{}});\n\n\n\n    let aroundCache = {};\n\n    function recolorAll(mb, bitmap, sx, sy, width, height, pad = 0) {\n        const RSTEP = 16;\n        const SSTEP = 8;\n\n        let data = bitmap.imageData.data;\n        let len = data.length;\n        let row = width * 4;\n\n        let updates = [];\n        let x = 0, y = 0;\n        aroundCache = {};\n        for (let i = 0; i < len; i+= 4) {\n            if (x < pad || x > width-pad || y < pad || y > height-pad) {\n                x++;\n                if (x >= width) {\n                    x = 0;\n                    y++;\n                }\n                continue;\n            }\n            let red = data[i];\n            let blue = data[i+2];\n            let maxR = red, minR = red;\n            let gx = ((sx+x)/PIX) |0;\n            let gy = ((sy+y)/PIX) |0;\n            let cell = grid.getCell(gx, gy);\n            if (!red) {\n                if (cell.value) {\n                    let total = (aroundCache[gx + '_' + gy] = aroundCache[gx + '_' + gy] || around(gx, gy).total);\n                    if (total === 8) {\n                        let redAround = false;\n                        for (let ni = 0; ni < neiColors1.length; ni++) {\n                            let {x, y} = neiColors1[ni];\n                            let ii = i + x * 4 + y * row;\n                            if (ii >= 0 && ii <= len - 4 && data[ii]) {\n                                redAround = true;\n                                break;\n                            }\n                        }\n                        if (redAround && Math.random() < 0.5) {\n                            updates.push({i, r: 255});\n                        }\n                    }\n                }\n            } else {\n                if (!cell.value) {\n                let total = (aroundCache[gx + '_' + gy] = aroundCache[gx + '_' + gy] || around(gx, gy).total);\n                if (total === 0 || cell._state.reducing === true) {\n                    if (blue >= 100) {\n                        updates.push({i, del: true});\n                    } else if (Math.random() < 0.8) {\n                        updates.push({i, b: Math.min(251, blue + 10)});\n                    }\n                }\n                } else {\n                    for (let ni = 0; ni < neiColors.length; ni++) {\n                        let {x, y} = neiColors[ni];\n                        let ii = i + x * 4 + y * row;\n                        if (ii >= 0 && ii <= len - 4) {\n                            let nred = data[ii];\n                            if (nred > maxR) maxR = nred;\n                            if (nred < minR) minR = nred;\n                        }\n\n                    }\n                    let outR = 0;\n                    if (minR == 0) {\n                        outR = 255;\n                    } else {\n                        outR = Math.max(RSTEP, maxR - RSTEP);\n                    }\n                    if (Math.abs(outR - red) >= SSTEP) {\n                        updates.push({i, r: Math.floor(red + SSTEP * Math.sign(outR - red))});\n                    }\n                    else if (data[i + 3] < 255) {\n                        updates.push({i});\n                    }\n                }\n            }\n\n            x++;\n            if (x >= width) {\n                x = 0;\n                y++;\n            }\n        }\n        if (updates.length) {\n            for (let ui = 0; ui < updates.length; ui++) {\n                let up = updates[ui];\n\n                if (up.del) {\n                    data[up.i+3] = 0;\n                    data[up.i] = 0;\n                } else if (up.b) {\n                    data[up.i] = 255-up.b;\n                    data[up.i+2] = up.b;\n                } else if (up.r) {\n                    data[up.i] = up.r;\n                }\n                if (data[up.i+3] < 255) {\n                    data[up.i+3] += 1;\n                }\n            }\n            mb.setDirty(bitmap);\n        } else {\n            return false;\n        }\n    }\n\n    return recolorAll;\n}\n\nlet fpsEl = document.querySelector(\"#fps\");\nfunction debugRender1() {\n    fpsEl.innerText = game.time.fps + \" updated: \" + updatedCount;\n    //game.debug.text(game.time.fps, game.camera.width/2,25);\n}\n\nlet started = false;\ndocument.querySelector(\"#start\").addEventListener(\"click\", () => {\n    if (started) timer.resume(); else timer.start();\n    started = true;\n});\ndocument.querySelector(\"#stop\").addEventListener(\"click\", () => timer.pause());"]}